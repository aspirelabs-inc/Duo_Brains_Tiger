# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import aspire.translation.brain_pb2 as brain__pb2


class BrainStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UserCopyPaste = channel.unary_unary(
                '/aspire.brain.Brain/UserCopyPaste',
                request_serializer=brain__pb2.UserCopyPasteRequest.SerializeToString,
                response_deserializer=brain__pb2.UserCopyPasteResponse.FromString,
                )
        self.CopyTable = channel.unary_unary(
                '/aspire.brain.Brain/CopyTable',
                request_serializer=brain__pb2.CopyTableRequest.SerializeToString,
                response_deserializer=brain__pb2.CopyTableResponse.FromString,
                )
        self.UserAction = channel.unary_unary(
                '/aspire.brain.Brain/UserAction',
                request_serializer=brain__pb2.UserActionRequest.SerializeToString,
                response_deserializer=brain__pb2.UserActionResponse.FromString,
                )


class BrainServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UserCopyPaste(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CopyTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BrainServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UserCopyPaste': grpc.unary_unary_rpc_method_handler(
                    servicer.UserCopyPaste,
                    request_deserializer=brain__pb2.UserCopyPasteRequest.FromString,
                    response_serializer=brain__pb2.UserCopyPasteResponse.SerializeToString,
            ),
            'CopyTable': grpc.unary_unary_rpc_method_handler(
                    servicer.CopyTable,
                    request_deserializer=brain__pb2.CopyTableRequest.FromString,
                    response_serializer=brain__pb2.CopyTableResponse.SerializeToString,
            ),
            'UserAction': grpc.unary_unary_rpc_method_handler(
                    servicer.UserAction,
                    request_deserializer=brain__pb2.UserActionRequest.FromString,
                    response_serializer=brain__pb2.UserActionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aspire.brain.Brain', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Brain(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UserCopyPaste(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aspire.brain.Brain/UserCopyPaste',
            brain__pb2.UserCopyPasteRequest.SerializeToString,
            brain__pb2.UserCopyPasteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CopyTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aspire.brain.Brain/CopyTable',
            brain__pb2.CopyTableRequest.SerializeToString,
            brain__pb2.CopyTableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aspire.brain.Brain/UserAction',
            brain__pb2.UserActionRequest.SerializeToString,
            brain__pb2.UserActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
