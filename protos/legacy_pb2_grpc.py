# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import legacy_pb2 as legacy__pb2


class BrainStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Update = channel.unary_unary(
                '/aspire.legacy.Brain/Update',
                request_serializer=legacy__pb2.UpdateRequest.SerializeToString,
                response_deserializer=legacy__pb2.UpdateResponse.FromString,
                )
        self.Uppercase = channel.unary_unary(
                '/aspire.legacy.Brain/Uppercase',
                request_serializer=legacy__pb2.UppercaseRequest.SerializeToString,
                response_deserializer=legacy__pb2.UppercaseResponse.FromString,
                )
        self.Copy = channel.unary_unary(
                '/aspire.legacy.Brain/Copy',
                request_serializer=legacy__pb2.CopyRequest.SerializeToString,
                response_deserializer=legacy__pb2.CopyResponse.FromString,
                )
        self.CopyEvent = channel.unary_unary(
                '/aspire.legacy.Brain/CopyEvent',
                request_serializer=legacy__pb2.CopyEventRequest.SerializeToString,
                response_deserializer=legacy__pb2.CopyEventResponse.FromString,
                )


class BrainServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Uppercase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Copy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CopyEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BrainServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=legacy__pb2.UpdateRequest.FromString,
                    response_serializer=legacy__pb2.UpdateResponse.SerializeToString,
            ),
            'Uppercase': grpc.unary_unary_rpc_method_handler(
                    servicer.Uppercase,
                    request_deserializer=legacy__pb2.UppercaseRequest.FromString,
                    response_serializer=legacy__pb2.UppercaseResponse.SerializeToString,
            ),
            'Copy': grpc.unary_unary_rpc_method_handler(
                    servicer.Copy,
                    request_deserializer=legacy__pb2.CopyRequest.FromString,
                    response_serializer=legacy__pb2.CopyResponse.SerializeToString,
            ),
            'CopyEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.CopyEvent,
                    request_deserializer=legacy__pb2.CopyEventRequest.FromString,
                    response_serializer=legacy__pb2.CopyEventResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aspire.legacy.Brain', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Brain(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aspire.legacy.Brain/Update',
            legacy__pb2.UpdateRequest.SerializeToString,
            legacy__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Uppercase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aspire.legacy.Brain/Uppercase',
            legacy__pb2.UppercaseRequest.SerializeToString,
            legacy__pb2.UppercaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Copy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aspire.legacy.Brain/Copy',
            legacy__pb2.CopyRequest.SerializeToString,
            legacy__pb2.CopyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CopyEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aspire.legacy.Brain/CopyEvent',
            legacy__pb2.CopyEventRequest.SerializeToString,
            legacy__pb2.CopyEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
